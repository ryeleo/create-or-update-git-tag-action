name: Test

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

env:
  test-message1: "  AA BB CC DEADBEEF!!  "
  test-message2: "  FULL Test Success!  "
  test-tag: test-tag/${{ github.run_id }}-${{ github.run_attempt }}

jobs:
  test-bash:
    permissions: write-all
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    timeout-minutes: 5
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4
      -
        name: Create Tag
        uses: ./
        with:
          tag-name: "${{ env.test-tag }}"
          tag-message: "${{ env.test-message1 }}"

      # - run: test "$(git tag --list --format='%(contents)')" = "${{ env.test-message1 }}"
      - name: Update Tag
        uses: ./
        with:
          tag-name: "${{ env.test-tag }}"
          tag-message: "${{ env.test-message2 }}"
      # - run: test "$(git tag --list --format='%(contents)')" = "${{ env.test-message2 }}"

      # TODO How to test 'not updating tag.'..?
      - name: Add new empty Commit
        run: |
          git config --global user.name "$(git log -1 --pretty=format:'%an')"
          git config --global user.email "$(git log -1 --pretty=format:'%ae')"
          git commit --allow-empty -m 'Commit for testing ""'

      - name: Update Tag 2 (should do nothing, since message is the same)
        uses: ./
        with:
          tag-name: "${{ env.test-tag }}"
          tag-message: "${{ env.test-message2 }}"


      # Commit with no changes
      # Then redo update tag
      


  # test-powershell:
  #   strategy:
  #     fail-fast: false
  #   runs-on: windows
  #   timeout-minutes: 5

  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: ./action.yml
  #       with:
  #         tag-name: ${{ github.env.test-tag }}
  #         tag-message: ${{ github.env.test-message }}
  #     - run: test "$(git tag --list --format='%(contents)')" = "${{ github.env.test-message }}"

  # # Make up matrix statuses into a status for status checks in branch protection rules
  # test-passing:
  #   needs: [ test-bash, test-powershell ]
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 1

  #   steps:
  #     - run: echo "All tests have passed."
